{"version":3,"file":"select-select-stories.iframe.bundle.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;AACA;AAEA;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAGA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AAAA;AACA;AAAA;;;;;;;;;;AAEA;AAAA;AACA;AACA;AAAA;;;;;AACA;AACA;AACA;AADA;;;;;;;;;;;;;;;;;;;;AAQA;AAlBA;AAoBA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC7EA;;AAEA;AACA;AACA;AAEA;AAEA;AAEA;AAEA;AAEA;AAKA;AACA;AAIA;;AAEA;AACA;AAAA;AACA;AAAA;;;;;;;;;;;;;;;;;;AAIA;AAEA;AAKA;AACA;AAIA;AAEA;AAAA;;;;;;;;;;;AAZA;AAeA;AAEA;AAKA;AACA;AAIA;AAEA;AAAA;;;;;;;;;;;AAZA;AAeA;AAGA;AAKA;AACA;AACA;AAMA;AACA;;AAEA;;;;;AACA;AACA;AAMA;;;;;;AAEA;;;;;;;;;;;;;;;;;AAIA;AAEA;AAKA;AACA;AACA;;;;;;;AAGA;AAEA;AAKA;AACA;AAIA;;AAEA;AAAA;AACA;AACA;AAAA;;;;;;;;;;;;;;;;AAIA;AAAA;;;;;;;;;;;;;AAGA;AAEA;AAKA;AACA;AACA;;;;;;;AAGA;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACpJA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA","sources":["webpack://a-peak-test/./src/components/ui/select/select.stories.tsx","webpack://a-peak-test/./src/components/ui/select/select.tsx","webpack://a-peak-test/./src/lib/utils.ts"],"sourcesContent":["import type { Meta, StoryObj } from '@storybook/react'\r\nimport * as React from 'react'\r\n\r\nimport {\r\n  Select,\r\n  SelectContent,\r\n  SelectGroup,\r\n  SelectItem,\r\n  SelectLabel,\r\n  SelectTrigger,\r\n  SelectValue,\r\n} from '@/components/ui/select/select'\r\n\r\nconst meta = {\r\n  title: 'ui/Select',\r\n  component: Select,\r\n  parameters: {\r\n    layout: 'centered',\r\n  },\r\n  tags: ['autodocs'],\r\n} satisfies Meta<typeof Select>\r\n\r\nexport default meta\r\ntype Story = StoryObj<typeof meta>\r\n\r\nconst data = [\r\n  { value: 'est', label: 'Eastern Standard Time (EST)' },\r\n  { value: 'cst', label: 'Central Standard Time (CST)' },\r\n  { value: 'mst', label: 'Mountain Standard Time (MST)' },\r\n  { value: 'pst', label: 'Pacific Standard Time (PST)' },\r\n  { value: 'akst', label: 'Alaska Standard Time (AKST)' },\r\n  { value: 'hst', label: 'Hawaii Standard Time (HST)' },\r\n  { value: 'gmt', label: 'Greenwich Mean Time (GMT)' },\r\n  { value: 'cet', label: 'Central European Time (CET)' },\r\n  { value: 'eet', label: 'Eastern European Time (EET)' },\r\n  { value: 'west', label: 'Western European Summer Time (WEST)' },\r\n  { value: 'cat', label: 'Central Africa Time (CAT)' },\r\n  { value: 'eat', label: 'East Africa Time (EAT)' },\r\n  { value: 'msk', label: 'Moscow Time (MSK)' },\r\n  { value: 'ist', label: 'India Standard Time (IST)' },\r\n  { value: 'cst_china', label: 'China Standard Time (CST)' },\r\n  { value: 'jst', label: 'Japan Standard Time (JST)' },\r\n  { value: 'kst', label: 'Korea Standard Time (KST)' },\r\n  { value: 'ist_indonesia', label: 'Indonesia Central Standard Time (WITA)' },\r\n  { value: 'awst', label: 'Australian Western Standard Time (AWST)' },\r\n  { value: 'acst', label: 'Australian Central Standard Time (ACST)' },\r\n  { value: 'aest', label: 'Australian Eastern Standard Time (AEST)' },\r\n  { value: 'nzst', label: 'New Zealand Standard Time (NZST)' },\r\n  { value: 'fjt', label: 'Fiji Time (FJT)' },\r\n  { value: 'art', label: 'Argentina Time (ART)' },\r\n  { value: 'bot', label: 'Bolivia Time (BOT)' },\r\n  { value: 'brt', label: 'Brasilia Time (BRT)' },\r\n  { value: 'clt', label: 'Chile Standard Time (CLT)' },\r\n]\r\n\r\nconst Component = (args: Story['args']) => {\r\n  return (\r\n    <Select {...args}>\r\n      <SelectTrigger className=\"w-[280px]\">\r\n        <SelectValue placeholder=\"Select a timezone\" />\r\n      </SelectTrigger>\r\n      <SelectContent className=\"h-80\">\r\n        <SelectGroup>\r\n          <SelectLabel>Time zones</SelectLabel>\r\n          {data.map((item) => (\r\n            <SelectItem key={item.value} value={item.value}>\r\n              {item.label}\r\n            </SelectItem>\r\n          ))}\r\n        </SelectGroup>\r\n      </SelectContent>\r\n    </Select>\r\n  )\r\n}\r\n\r\nexport const Template: Story = {\r\n  render: Component,\r\n}\r\n","'use client'\n\nimport * as SelectPrimitive from '@radix-ui/react-select'\nimport { Check, ChevronDown, ChevronUp } from 'lucide-react'\nimport * as React from 'react'\n\nimport { cn } from '@/lib/utils'\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      'flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1',\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      'flex cursor-default items-center justify-center py-1',\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      'flex cursor-default items-center justify-center py-1',\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = 'popper', ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        'relative z-50 max-h-96 min-w-[8rem] overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2',\n        position === 'popper' &&\n          'data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1',\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          'p-1',\n          position === 'popper' &&\n            'h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]'\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn('py-1.5 pl-8 pr-2 text-sm font-semibold', className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      'relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50',\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn('-mx-1 my-1 h-px bg-muted', className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectContent,\n  SelectGroup,\n  SelectItem,\n  SelectLabel,\n  SelectScrollDownButton,\n  SelectScrollUpButton,\n  SelectSeparator,\n  SelectTrigger,\n  SelectValue,\n}\n","import { type ClassValue, clsx } from 'clsx'\nimport { twMerge } from 'tailwind-merge'\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n\nexport function wait<T>({ ms, data }: { ms: number; data: T }): Promise<T> {\n  return new Promise((resolve) => setTimeout(() => resolve(data), ms))\n}\n"],"names":[],"sourceRoot":""}