{"version":3,"file":"checkbox-checkbox-stories.iframe.bundle.js","mappings":";;;;;;;;;;;;;;;;;;;;;AAEA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAGA;AACA;AACA;AACA;AAAA;;;;;AACA;AAEA;AACA;AACA;;;;;;;;;;;AAMA;AAdA;AAgBA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC/CA;;AAEA;AACA;AACA;AAEA;AAEA;AAKA;AACA;AAIA;AAEA;AACA;AAEA;AAAA;;;;;;;;;;;;;;;;;AAIA;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC7BA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA","sources":["webpack://a-peak-test/./src/components/ui/checkbox/checkbox.stories.tsx","webpack://a-peak-test/./src/components/ui/checkbox/checkbox.tsx","webpack://a-peak-test/./src/lib/utils.ts"],"sourcesContent":["import type { Meta, StoryObj } from '@storybook/react'\n\nimport { Checkbox } from '@/components/ui/checkbox/checkbox'\n\ntype CheckboxType = typeof Checkbox\ntype CheckboxStory = React.ComponentProps<CheckboxType> & {\n  withText: boolean\n}\n\nconst meta = {\n  title: 'ui/Checkbox',\n  component: Checkbox,\n  parameters: {\n    layout: 'centered',\n  },\n  argTypes: {\n    withText: {\n      control: 'boolean',\n    },\n  },\n  tags: ['autodocs'],\n} satisfies Meta<CheckboxStory>\n\nexport default meta\ntype Story = StoryObj<CheckboxStory>\n\nconst Component = (args: CheckboxStory) => {\n  return (\n    <div className=\"flex items-center space-x-2\">\n      <Checkbox id=\"terms\" />\n      {args.withText && (\n        <label\n          htmlFor=\"terms\"\n          className=\"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n        >\n          Accept terms and conditions\n        </label>\n      )}\n    </div>\n  )\n}\n\nexport const Template: Story = {\n  args: {\n    withText: true,\n  },\n  render: Component,\n}\n","'use client'\n\nimport * as CheckboxPrimitive from '@radix-ui/react-checkbox'\nimport { Check } from 'lucide-react'\nimport * as React from 'react'\n\nimport { cn } from '@/lib/utils'\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      'peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground',\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn('flex items-center justify-center text-current')}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","import { type ClassValue, clsx } from 'clsx'\nimport { twMerge } from 'tailwind-merge'\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n\nexport function wait<T>({ ms, data }: { ms: number; data: T }): Promise<T> {\n  return new Promise((resolve) => setTimeout(() => resolve(data), ms))\n}\n"],"names":[],"sourceRoot":""}