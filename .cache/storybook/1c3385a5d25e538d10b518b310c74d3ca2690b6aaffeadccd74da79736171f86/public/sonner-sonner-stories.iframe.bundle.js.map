{"version":3,"file":"sonner-sonner-stories.iframe.bundle.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;;;;AACA;AAAA;;;;;;;;;;;AAIA;AAEA;AAGA;AACA;AAEA;AACA;AACA;AACA;;;;;;AAIA;AAVA;AAYA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;;;;;;AAIA;AAdA;AAgBA;AACA;AAEA;AACA;AACA;AACA;;;;;;AAIA;AAVA;AAYA;AACA;AAEA;AACA;AACA;AACA;;;;;;AAIA;AAVA;AAYA;AACA;AAEA;AACA;AACA;AACA;;;;;;AAIA;AAVA;AAYA;AACA;AAEA;AACA;AACA;AACA;;;;;;AAIA;AAVA;AAYA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;;;;;;AAIA;AAjBA;AAmBA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;AAIA;AAlBA;AAovDA;;AAEA;AAIA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;;;;;;AAGA;AAlBA;AAoBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC1BA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA","sources":["webpack://a-peak-test/./src/components/ui/sonner/sonner.stories.tsx","webpack://a-peak-test/./src/components/ui/button/button.tsx","webpack://a-peak-test/./src/components/ui/sonner/sonner.tsx","webpack://a-peak-test/./src/lib/utils.ts"],"sourcesContent":["import type { Meta, StoryObj } from '@storybook/react'\r\nimport { toast } from 'sonner'\r\n\r\nimport { Button } from '@/components/ui/button/button'\r\nimport { Toaster } from '@/components/ui/sonner/sonner'\r\nimport { wait } from '@/lib/utils'\r\n\r\nconst meta = {\r\n  title: 'ui/Toaster',\r\n  component: Toaster,\r\n  parameters: {\r\n    layout: 'centered',\r\n  },\r\n  argTypes: {\r\n    position: {\r\n      control: 'select',\r\n      options: [\r\n        'top-left',\r\n        'top-center',\r\n        'top-right',\r\n        'bottom-left',\r\n        'bottom-center',\r\n        'bottom-right',\r\n      ],\r\n    },\r\n  },\r\n  args: {\r\n    position: 'top-center',\r\n    richColors: true,\r\n    closeButton: false,\r\n  },\r\n  decorators: [\r\n    (Story, { args }) => (\r\n      <div>\r\n        <Story />\r\n        <Toaster {...args} />\r\n      </div>\r\n    ),\r\n  ],\r\n} satisfies Meta<typeof Toaster>\r\n\r\nexport default meta\r\ntype Story = StoryObj<typeof meta>\r\n\r\nconst DefaultComponent = (args: Story['args']) => {\r\n  return (\r\n    <Button\r\n      {...args}\r\n      variant=\"outline\"\r\n      onClick={() => toast('Event has been created')}\r\n    >\r\n      Show Toast\r\n    </Button>\r\n  )\r\n}\r\n\r\nconst DescriptionComponent = (args: Story['args']) => {\r\n  return (\r\n    <Button\r\n      {...args}\r\n      variant=\"outline\"\r\n      onClick={() =>\r\n        toast('Toast title info', {\r\n          description: 'Toast description info here ...',\r\n        })\r\n      }\r\n    >\r\n      Show Toast\r\n    </Button>\r\n  )\r\n}\r\n\r\nconst SuccessComponent = (args: Story['args']) => {\r\n  return (\r\n    <Button\r\n      {...args}\r\n      variant=\"outline\"\r\n      onClick={() => toast.success('Toast success notification')}\r\n    >\r\n      Show Toast\r\n    </Button>\r\n  )\r\n}\r\n\r\nconst InfoComponent = (args: Story['args']) => {\r\n  return (\r\n    <Button\r\n      {...args}\r\n      variant=\"outline\"\r\n      onClick={() => toast.info('Toast info notification')}\r\n    >\r\n      Show Toast\r\n    </Button>\r\n  )\r\n}\r\n\r\nconst WarningComponent = (args: Story['args']) => {\r\n  return (\r\n    <Button\r\n      {...args}\r\n      variant=\"outline\"\r\n      onClick={() => toast.info('Toast warning notification')}\r\n    >\r\n      Show Toast\r\n    </Button>\r\n  )\r\n}\r\n\r\nconst ErrorComponent = (args: Story['args']) => {\r\n  return (\r\n    <Button\r\n      {...args}\r\n      variant=\"outline\"\r\n      onClick={() => toast.info('Toast error notification')}\r\n    >\r\n      Show Toast\r\n    </Button>\r\n  )\r\n}\r\n\r\nconst ActionComponent = (args: Story['args']) => {\r\n  return (\r\n    <Button\r\n      {...args}\r\n      variant=\"outline\"\r\n      onClick={() =>\r\n        toast('Toast action notification', {\r\n          action: {\r\n            label: 'Close',\r\n            onClick: () => {},\r\n          },\r\n        })\r\n      }\r\n    >\r\n      Show Toast\r\n    </Button>\r\n  )\r\n}\r\n\r\nconst PromiseComponent = (args: Story['args']) => {\r\n  return (\r\n    <Button\r\n      {...args}\r\n      variant=\"outline\"\r\n      onClick={() =>\r\n        toast.promise(wait({ ms: 2000, data: { name: 'Sample name' } }), {\r\n          loading: 'Loading...',\r\n          success: (data) => {\r\n            return `'${data?.name}' toast has been added`\r\n          },\r\n          error: 'Error',\r\n        })\r\n      }\r\n    >\r\n      Show Toast\r\n    </Button>\r\n  )\r\n}\r\n\r\nexport const Default: Story = {\r\n  render: DefaultComponent,\r\n}\r\n\r\nexport const Description: Story = {\r\n  render: DescriptionComponent,\r\n}\r\n\r\nexport const Success: Story = {\r\n  render: SuccessComponent,\r\n}\r\n\r\nexport const Info: Story = {\r\n  render: InfoComponent,\r\n}\r\n\r\nexport const Warning: Story = {\r\n  render: WarningComponent,\r\n}\r\n\r\nexport const Error: Story = {\r\n  render: ErrorComponent,\r\n}\r\n\r\nexport const Action: Story = {\r\n  render: ActionComponent,\r\n}\r\n\r\nexport const Loader: Story = {\r\n  render: PromiseComponent,\r\n}\r\n","import { Slot } from '@radix-ui/react-slot'\nimport { cva, type VariantProps } from 'class-variance-authority'\nimport * as React from 'react'\n\nimport { cn } from '@/lib/utils'\n\nconst buttonVariants = cva(\n  'inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50',\n  {\n    variants: {\n      variant: {\n        default: 'bg-primary text-primary-foreground hover:bg-primary/90',\n        destructive:\n          'bg-destructive text-destructive-foreground hover:bg-destructive/90',\n        outline:\n          'border border-input bg-background hover:bg-accent hover:text-accent-foreground',\n        secondary:\n          'bg-secondary text-secondary-foreground hover:bg-secondary/80',\n        ghost: 'hover:bg-accent hover:text-accent-foreground',\n        link: 'text-primary underline-offset-4 hover:underline',\n      },\n      size: {\n        default: 'h-10 px-4 py-2',\n        sm: 'h-9 rounded-md px-3',\n        lg: 'h-11 rounded-md px-8',\n        icon: 'h-10 w-10',\n      },\n    },\n    defaultVariants: {\n      variant: 'default',\n      size: 'default',\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : 'button'\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = 'Button'\n\nexport { Button, buttonVariants }\n","'use client'\n\nimport { Toaster as Sonner } from 'sonner'\n\ntype ToasterProps = React.ComponentProps<typeof Sonner>\n\nconst Toaster = ({ ...props }: ToasterProps) => {\n  return (\n    <Sonner\n      className=\"toaster group\"\n      toastOptions={{\n        classNames: {\n          toast:\n            'group toast group-[.toaster]:bg-background group-[.toaster]:text-foreground group-[.toaster]:border-border group-[.toaster]:shadow-lg',\n          description: 'group-[.toast]:text-muted-foreground',\n          actionButton:\n            'group-[.toast]:bg-primary group-[.toast]:text-primary-foreground',\n          cancelButton:\n            'group-[.toast]:bg-muted group-[.toast]:text-muted-foreground',\n        },\n      }}\n      {...props}\n    />\n  )\n}\n\nexport { Toaster }\n","import { type ClassValue, clsx } from 'clsx'\nimport { twMerge } from 'tailwind-merge'\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n\nexport function wait<T>({ ms, data }: { ms: number; data: T }): Promise<T> {\n  return new Promise((resolve) => setTimeout(() => resolve(data), ms))\n}\n"],"names":[],"sourceRoot":""}